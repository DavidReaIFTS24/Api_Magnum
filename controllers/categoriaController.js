// Importaci√≥n del modelo de Categor√≠a para interactuar con la base de datos
const Categoria = require('../models/categoriaModel');

// Objeto controlador que contendr√° todas las funciones de manejo de categor√≠as
const categoriaController = {};

/**
 * Funci√≥n controladora para crear una nueva categor√≠a.
 * M√©todo HTTP: POST /api/categorias
 * @param {object} req - Objeto de solicitud de Express (contiene el body).
 * @param {object} res - Objeto de respuesta de Express.
 */
categoriaController.crearCategoria = async (req, res) => {
    try {
        // Desestructurar los datos de la categor√≠a desde el cuerpo de la solicitud
        const { nombre, descripcion, imagen } = req.body;

        console.log(`üìÇ Creando categor√≠a: ${nombre}`); // Log de inicio del proceso

        // 1. Validaci√≥n de campos requeridos
        if (!nombre) {
            // Si falta el nombre, devuelve un error 400 (Bad Request)
            return res.status(400).json({
                error: 'El nombre de la categor√≠a es requerido.'
            });
        }

        // 2. Crear una nueva instancia del modelo Categoria
        const categoria = new Categoria({
            nombre,
            descripcion,
            imagen
        });

        // 3. Guardar la nueva categor√≠a en la base de datos
        // Se asume que 'categoria.save()' maneja la persistencia
        const categoriaCreada = await categoria.save();

        console.log(`‚úÖ Categor√≠a creada exitosamente: ${nombre}`); // Log de √©xito

        // 4. Enviar respuesta de √©xito 201 (Created) con la categor√≠a creada
        res.status(201).json({
            message: 'Categor√≠a creada exitosamente',
            categoria: categoriaCreada
        });

    } catch (error) {
        // Manejo de errores generales (ej. error de base de datos)
        console.error('‚ùå Error creando categor√≠a:', error);
        res.status(500).json({
            error: 'Error interno del servidor al crear categor√≠a.'
        });
    }
};

// -----------------------------------------------------------------------------

/**
 * Funci√≥n controladora para obtener todas las categor√≠as.
 * M√©todo HTTP: GET /api/categorias
 * @param {object} req - Objeto de solicitud de Express.
 * @param {object} res - Objeto de respuesta de Express.
 */
categoriaController.obtenerCategorias = async (req, res) => {
    try {
        // 1. Buscar todas las categor√≠as en la base de datos
        // Se asume que 'Categoria.findAll()' retorna un array de categor√≠as
        const categorias = await Categoria.findAll();

        console.log(`‚úÖ Obtenidas ${categorias.length} categor√≠as`); // Log de √©xito

        // 2. Enviar respuesta exitosa (c√≥digo 200 por defecto) con las categor√≠as y el total
        res.json({
            categorias,
            total: categorias.length
        });

    } catch (error) {
        // Manejo de errores generales
        console.error('‚ùå Error obteniendo categor√≠as:', error);
        res.status(500).json({
            error: 'Error interno del servidor al obtener categor√≠as.'
        });
    }
};

// -----------------------------------------------------------------------------

/**
 * Funci√≥n controladora para obtener una categor√≠a por su ID.
 * M√©todo HTTP: GET /api/categorias/:id
 * @param {object} req - Objeto de solicitud de Express (contiene 'params').
 * @param {object} res - Objeto de respuesta de Express.
 */
categoriaController.obtenerCategoria = async (req, res) => {
    try {
        // 1. Obtener el ID de la categor√≠a desde los par√°metros de la URL
        const { id } = req.params;

        // 2. Buscar la categor√≠a por ID en la base de datos
        // Se asume que 'Categoria.findById(id)' retorna una categor√≠a o null/undefined
        const categoria = await Categoria.findById(id);

        // 3. Verificar si la categor√≠a fue encontrada
        if (!categoria) {
            // Si no se encuentra, devuelve un error 404 (Not Found)
            return res.status(404).json({
                error: 'Categor√≠a no encontrada.'
            });
        }

        console.log(`‚úÖ Categor√≠a obtenida: ${categoria.nombre}`); // Log de √©xito

        // 4. Enviar respuesta exitosa con la categor√≠a
        res.json({
            categoria
        });

    } catch (error) {
        // Manejo de errores generales (ej. formato de ID inv√°lido, error de BD)
        console.error('‚ùå Error obteniendo categor√≠a:', error);
        res.status(500).json({
            error: 'Error interno del servidor al obtener categor√≠a.'
        });
    }
};

// -----------------------------------------------------------------------------

/**
 * Funci√≥n controladora para actualizar una categor√≠a por su ID.
 * M√©todo HTTP: PUT /api/categorias/:id
 * @param {object} req - Objeto de solicitud de Express (contiene 'params' y 'body').
 * @param {object} res - Objeto de respuesta de Express.
 */
categoriaController.actualizarCategoria = async (req, res) => {
    try {
        // 1. Obtener el ID de los par√°metros y los datos del cuerpo
        const { id } = req.params;
        const { nombre, descripcion, imagen } = req.body;

        console.log(`üîÑ Actualizando categor√≠a: ${id}`); // Log de inicio

        // 2. Verificar si la categor√≠a existe antes de intentar actualizar
        const categoriaExistente = await Categoria.findById(id);
        if (!categoriaExistente) {
            // Si no existe, devuelve un error 404
            return res.status(404).json({
                error: 'Categor√≠a no encontrada.'
            });
        }

        // 3. Llamar al m√©todo de actualizaci√≥n del modelo
        // Se asume que 'Categoria.update(id, datos)' actualiza los campos proporcionados
        await Categoria.update(id, {
            nombre,
            descripcion,
            imagen
        });

        console.log(`‚úÖ Categor√≠a actualizada: ${id}`); // Log de √©xito

        // 4. Enviar respuesta de √©xito (generalmente sin contenido, solo un mensaje)
        res.json({
            message: 'Categor√≠a actualizada exitosamente'
        });

    } catch (error) {
        // Manejo de errores generales
        console.error('‚ùå Error actualizando categor√≠a:', error);
        res.status(500).json({
            error: 'Error interno del servidor al actualizar categor√≠a.'
        });
    }
};

// -----------------------------------------------------------------------------

/**
 * Funci√≥n controladora para eliminar una categor√≠a por su ID.
 * M√©todo HTTP: DELETE /api/categorias/:id
 * @param {object} req - Objeto de solicitud de Express (contiene 'params').
 * @param {object} res - Objeto de respuesta de Express.
 */
categoriaController.eliminarCategoria = async (req, res) => {
    try {
        // 1. Obtener el ID de la categor√≠a a eliminar
        const { id } = req.params;

        console.log(`üóëÔ∏è Eliminando categor√≠a: ${id}`); // Log de inicio

        // 2. Verificar si la categor√≠a existe antes de intentar eliminar
        const categoriaExistente = await Categoria.findById(id);
        if (!categoriaExistente) {
            // Si no existe, devuelve un error 404
            return res.status(404).json({
                error: 'Categor√≠a no encontrada.'
            });
        }

        // 3. Llamar al m√©todo de eliminaci√≥n del modelo
        // Se asume que 'Categoria.delete(id)' elimina el registro correspondiente
        await Categoria.delete(id);

        console.log(`‚úÖ Categor√≠a eliminada: ${id}`); // Log de √©xito

        // 4. Enviar respuesta de √©xito (generalmente c√≥digo 200 o 204 No Content)
        res.json({
            message: 'Categor√≠a eliminada exitosamente'
        });

    } catch (error) {
        // Manejo de errores generales
        console.error('‚ùå Error eliminando categor√≠a:', error);
        res.status(500).json({
            error: 'Error interno del servidor al eliminar categor√≠a.'
        });
    }
};

// Exportar el objeto controlador para que pueda ser utilizado por el router
module.exports = categoriaController;